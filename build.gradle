import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
}

apply plugin: 'io.spring.dependency-management'

dependencyManagement {
	imports {
		mavenBom SpringBootPlugin.BOM_COORDINATES
	}
}

group = 'org.storck'
version = '1.0.0-SNAPSHOT'
java.sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
	implementation 'org.neo4j.driver:neo4j-java-driver'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'com.google.guava:guava:33.0.0-jre'
	implementation 'io.projectreactor:reactor-core:3.4.26'
	compileOnly 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named("bootJar") {
	layered {
		enabled = true
		includeLayerTools = true
	}
}

tasks.named("bootRun") {
	jvmArgs = ['-Xms4g', '-Xmx8g']
}

tasks.named("bootBuildImage") {
	docker {
		host = "${System.env.DOCKER_HOST}"
		bindHostToBuilder = true
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

assemble {
	finalizedBy('bootBuildImage')
}
